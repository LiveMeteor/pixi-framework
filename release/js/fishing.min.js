"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var app;
(function (app) {
    app.Config = {
        isDebug: true,
        version: "1.0.0",
        stageWidth: 1440,
        stageHeight: 810,
        pathTexturesResource: "img/",
        jsTexturesMode: true,
        quality: 2
    };
})(app || (app = {}));
var app;
(function (app) {
    var GameAPIInstance = (function () {
        function GameAPIInstance() {
            this.gameId = 112;
            this.gameModelId = 9;
            this.gameName = "fishing";
            this.version = "1.0.0";
            fw.Config = app.Config;
            window.gameId = this.gameId;
            window.gameModelId = this.gameModelId;
            window.gameName = this.gameName;
        }
        GameAPIInstance.prototype.init = function (stageWidth, stageHeight, containerId, data) {
            if (stageWidth === void 0) { stageWidth = 1440; }
            if (stageHeight === void 0) { stageHeight = 810; }
            if (this.director) {
                return false;
            }
            else {
                this.director = new app.Fishing(stageWidth, stageHeight, containerId, data);
                return true;
            }
        };
        GameAPIInstance.prototype.setData = function (data) {
            this.director.setData(data);
        };
        GameAPIInstance.prototype.setCurrTime = function (time) {
            this.director && this.director.setCurrTime(time);
        };
        GameAPIInstance.prototype.setDebug = function (value) {
            fw.Config.isDebug = value;
        };
        GameAPIInstance.prototype.resize = function (stageWidth, stageHeight) {
            this.director && this.director.resize(stageWidth, stageHeight);
            return this.director ? true : false;
        };
        GameAPIInstance.prototype.command = function (type, jsonData, callback) { };
        GameAPIInstance.prototype.destroy = function (force) {
            if (this.director) {
                this.director.destroy();
                this.director = undefined;
                return true;
            }
            else {
                return false;
            }
        };
        return GameAPIInstance;
    }());
    app.GameAPI = new GameAPIInstance();
})(app || (app = {}));
var app;
(function (app) {
    var Fishing = (function (_super) {
        __extends(Fishing, _super);
        function Fishing(stageWidth, stageHeight, containerId, data) {
            var _this = this;
            var fps = 24;
            fw.Config.quality = data.level;
            switch (data.forceSoundEngine) {
                case 1:
                    fw.SoundManager.engine = new fw.HTMLAudioEngine();
                    break;
                case 2:
                    fw.SoundManager.engine = new fw.WebAudioEngine();
                    break;
                case 3:
                    fw.SoundManager.engine = new fw.NativeAudioEngine();
                    break;
            }
            if (data.level <= 0) {
                data.level = 1;
                fps = 6;
            }
            app.FishingModel.quiet = false;
            _this = _super.call(this, stageWidth, stageHeight, false, containerId, data.level, fps) || this;
            _this.reportCounter = 0;
            _this.reportStamp = fw.getTimer();
            app.FishingModel.sensorsReport("game_init", {});
            fw.GResponser.initialize();
            fw.GResponser.addListener("gamerunning", _this.onCheckGameRunning, _this);
            fw.GResponser.addListener("destroy", _this.destroy, _this);
            _this.updateUserInfo();
            return _this;
        }
        Fishing.prototype.onCheckGameRunning = function (data) {
            var status = app.FishingModel.cacheSyncInfo ? app.FishingModel.cacheSyncInfo.status : 1;
            if (app.FishingModel.mode == app.RoleType.REVIEW || app.FishingModel.mode == app.RoleType.PREVIEW)
                status = 0;
            fw.GResponser.postMessage("gamerunning", { status: status });
        };
        Fishing.prototype.updateUserInfo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var role, studentsInfo, _i, studentsInfo_1, info, myinfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, fw.GResponser.asyncPostMessage("role", {}, "role")];
                        case 1:
                            role = _a.sent();
                            switch (role) {
                                case "student":
                                    app.FishingModel.mode = app.RoleType.STUDENT;
                                    break;
                                case "teacher":
                                    app.FishingModel.mode = app.RoleType.TEACHER;
                                    break;
                                case "observer":
                                    app.FishingModel.mode = app.RoleType.OBSERVER;
                                    break;
                                case "record":
                                    app.FishingModel.mode = app.RoleType.RECORDER;
                                    break;
                                case "preview":
                                    app.FishingModel.mode = app.RoleType.PREVIEW;
                                    break;
                                case "admin":
                                    app.FishingModel.mode = app.RoleType.ADMIN;
                                    break;
                                default:
                                    app.FishingModel.mode = app.RoleType.REVIEW;
                                    break;
                            }
                            fw.Log.log("Game Mode: " + app.FishingModel.mode);
                            if ((app.FishingModel.mode == app.RoleType.REVIEW || app.FishingModel.mode == app.RoleType.PREVIEW) && fw.getDeviceType() == fw.DeviceType.iPad && !fw.SoundManager.engine) {
                                if (fw.getDeviceVer()[0] >= 9) {
                                    fw.SoundManager.engine = new fw.WebAudioEngine();
                                }
                                else {
                                    fw.SoundManager.engine = new fw.HTMLAudioEngine();
                                }
                            }
                            return [4, fw.GResponser.asyncPostMessage("studentsinfo", {}, "studentsinfo")];
                        case 2:
                            studentsInfo = _a.sent();
                            app.FishingModel.studentsInfo = [];
                            for (_i = 0, studentsInfo_1 = studentsInfo; _i < studentsInfo_1.length; _i++) {
                                info = studentsInfo_1[_i];
                                if (info.index == -1)
                                    continue;
                                app.FishingModel.studentsInfo.push({
                                    uid: info.studentId || "",
                                    name: info.studentName || "",
                                    index: info.index || 0
                                });
                            }
                            app.FishingModel.studentsInfo.sort(function (a, b) {
                                if (a.index < b.index)
                                    return -1;
                                else if (a.index > b.index)
                                    return 1;
                                else
                                    return 0;
                            });
                            if (!(app.FishingModel.mode == app.RoleType.STUDENT)) return [3, 4];
                            return [4, fw.GResponser.asyncPostMessage("myinfo", {}, "myinfo")];
                        case 3:
                            myinfo = _a.sent();
                            app.FishingModel.myUid = myinfo.uid;
                            app.FishingModel.myName = myinfo.name;
                            _a.label = 4;
                        case 4:
                            this.updateGameInfo();
                            return [2];
                    }
                });
            });
        };
        Fishing.prototype.updateGameInfo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var pageDetail, syncInfo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, fw.GResponser.asyncPostMessage("init", {}, "pageDetail")];
                        case 1:
                            pageDetail = _a.sent();
                            pageDetail.gameId && (app.GameAPI.gameId = pageDetail.gameId);
                            pageDetail.gameMode && (app.GameAPI.gameModelId = pageDetail.gameMode);
                            if (!(app.FishingModel.mode == app.RoleType.STUDENT || app.FishingModel.mode == app.RoleType.TEACHER || app.FishingModel.mode == app.RoleType.OBSERVER)) return [3, 3];
                            return [4, fw.GResponser.asyncPostMessage("stageGameSync", { type: app.GameAPI.gameName }, "stageGameSync")];
                        case 2:
                            syncInfo = _a.sent();
                            if (syncInfo.type != app.GameAPI.gameName) {
                                fw.Log.warn("receive wrong game type message!!!");
                                return [2];
                            }
                            fw.GResponser.postMessage("studentmute", syncInfo.status == 1);
                            app.FishingModel.cacheSyncInfo = syncInfo;
                            app.FishingModel.clientTimeDist = Date.now() - syncInfo.currTime;
                            if (syncInfo.status == 1) {
                                if (syncInfo.currentTime - syncInfo.startTime > app.FishingModel.stageTime * 4) {
                                    syncInfo.status = 2;
                                }
                                else {
                                    this.pastTime = (syncInfo.currentTime - syncInfo.startTime) / 1000;
                                }
                            }
                            app.FishingModel.scoreBars && app.FishingModel.scoreBars.updateScores();
                            _a.label = 3;
                        case 3:
                            this.setData(pageDetail);
                            return [2];
                    }
                });
            });
        };
        Fishing.prototype.setData = function (value) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, url, resources;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            app.FishingModel.randomSeed = value.randomId % 100;
                            app.FishingModel.gameConfig = value.list;
                            _i = 0, _a = app.FishingModel.mapAudios;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3, 4];
                            url = _a[_i];
                            return [4, fw.SoundManager.addSound(url.name, url.url, url.url.indexOf("music") > -1)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4:
                            resources = [
                                "img/fishing.json",
                                "img/fishing_bg.png",
                                "img/fishing_foreground.png",
                                "img/fishing_wave.png",
                                "img/fishing_spindrift1.png",
                                "img/fishing_spindrift2.png",
                                "img/fishing_spindrift3.png"
                            ];
                            if (fw.getDeviceType() == fw.DeviceType.iPad) {
                                resources.push("img/bbubbles_submarine_ipad.png");
                            }
                            else {
                                resources.push("img/bbubbles_submarine.png");
                            }
                            fw.SceneManager.setCurrentScene(app.FishingScene, value, fw.ResizeAlign.SCALE_FILL, resources, false);
                            this.resize(this.stageWidth, this.stageHeight);
                            if (this.pastTime) {
                                fw.SceneManager.current().setCurrTime(this.pastTime);
                                app.FishingModel.sensorsReport("game_start", {
                                    start_type: "ingame",
                                    start_time: (app.FishingModel.cacheSyncInfo ? app.FishingModel.cacheSyncInfo.currTime : Date.now()) - app.FishingModel.clientTimeDist
                                });
                                this.pastTime = null;
                            }
                            fw.GResponser.addListener("stageGameSwitch", this.onGameSwitch, this);
                            return [2];
                    }
                });
            });
        };
        Fishing.prototype.onGameSwitch = function (data) {
            if (app.FishingModel.mode == app.RoleType.RECORDER) {
                app.FishingModel.cacheSyncInfo = {
                    type: app.GameAPI.gameName,
                    status: 0,
                    currTime: Date.now()
                };
                data.currTime = Date.now();
            }
            if (data.type != app.GameAPI.gameName || !app.FishingModel.cacheSyncInfo)
                return;
            app.FishingModel.cacheSyncInfo.status = data.status;
            fw.GResponser.postMessage("studentmute", data.status == 1);
            fw.GResponser.postMessage("hideGuideLoad", { status: 1 });
            if (data.status == 1) {
                app.FishingModel.cacheSyncInfo.startTime = data.currTime;
                fw.Log.log("game start time: " + new Date(app.FishingModel.cacheSyncInfo.startTime).toString());
                fw.PanelManager.isOpen(app.FishingEnding) &&
                    fw.PanelManager.hidePanel(app.FishingEnding);
                window.hideEffectTrophy();
                var panelEntrance = fw.PanelManager.getPanel(app.FishingEntrance);
                if (panelEntrance.isOpen) {
                    panelEntrance.hide();
                }
                else {
                    var scene = fw.SceneManager.current();
                    scene.isOpen && scene.onOpenIntro();
                }
                app.FishingModel.sensorsReport("game_start", {
                    start_type: "normal",
                    start_time: app.FishingModel.cacheSyncInfo.startTime - app.FishingModel.clientTimeDist
                });
            }
            else {
                app.FishingModel.cacheSyncInfo.startTime = null;
                app.FishingModel.quiet = true;
                fw.PanelManager.hideAllPanel();
                app.FishingModel.quiet = false;
                var scene = fw.SceneManager.current();
                scene.isOpen && scene.onOpenEnding();
            }
        };
        Fishing.prototype.setCurrTime = function (time) {
            app.FishingModel.cacheSyncInfo = { startTime: Date.now() - time * 1000 };
            var currScnee = fw.SceneManager.current();
            if (currScnee && currScnee instanceof app.FishingScene) {
                currScnee.setCurrTime(time);
            }
            else {
                this.pastTime = time;
            }
        };
        Fishing.prototype.render = function () {
            _super.prototype.render.call(this);
            this.reportCounter++;
            var now = fw.getTimer();
            if (now - this.reportStamp > 3000) {
                app.FishingModel.sensorsReport("game_fps", { fps: (this.reportCounter / 3).toFixed(2) });
                this.reportStamp = now;
                this.reportCounter = 0;
            }
        };
        Fishing.prototype.destroy = function () {
            app.FishingModel.quiet = false;
            fw.SoundManager.stopSound("fishing_bg_music");
            fw.GResponser.destroy();
            app.FishingModel.gameConfig = null;
            _super.prototype.destroy.call(this);
        };
        return Fishing;
    }(fw.GameDirector));
    app.Fishing = Fishing;
})(app || (app = {}));
var app;
(function (app) {
    var FishingEnding = (function (_super) {
        __extends(FishingEnding, _super);
        function FishingEnding() {
            return _super.call(this, 435, 270) || this;
        }
        FishingEnding.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
            this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            var bg = this.resource.createSprite("fishing_panel_bg.png", 0, 0, true);
            bg.width = 435;
            bg.height = 270;
            this.addChild(bg);
            var msg = app.FishingModel.mode == 1 ? "What’s next? Let’s have a look!" : "Click to move on to the next slide";
            this.labelMsg = this.resource.createLabel(msg, 218, 100, 20, 0x7b452b, "center");
            this.labelMsg.style.wordWrap = true;
            this.labelMsg.style.wordWrapWidth = 435;
            this.addChild(this.labelMsg);
        };
        FishingEnding.prototype.onOpen = function () {
            _super.prototype.onOpen.call(this);
            if (app.FishingModel.mode != 1) {
                this.btnNext = this.resource.createButton("fishing_btn_start_up.png", 18, 150, this.onNext, this);
                this.btnNext.width = 300;
                this.btnNext.height = 60;
                this.addChild(this.btnNext);
            }
        };
        FishingEnding.prototype.onNext = function () {
            fw.GResponser.postMessage("nextslide");
        };
        FishingEnding.prototype.onClose = function () {
            this.btnNext && this.btnNext.destroy();
            !app.FishingModel.quiet && this.mData && this.mData.func && this.mData.func.call(this.mData.this);
            _super.prototype.onClose.call(this);
        };
        return FishingEnding;
    }(fw.BasePanel));
    app.FishingEnding = FishingEnding;
})(app || (app = {}));
var app;
(function (app) {
    var FishingEntrance = (function (_super) {
        __extends(FishingEntrance, _super);
        function FishingEntrance() {
            return _super.call(this, 435, 270) || this;
        }
        FishingEntrance.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
            this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            var bg = this.resource.createSprite("fishing_panel_bg.png", 0, 0, true);
            bg.width = 435;
            bg.height = 270;
            this.addChild(bg);
            this.labelMsg = this.resource.createLabel("Click to start the word game", 218, 100, 20, 0x7b452b, "center");
            this.labelMsg.style.wordWrap = true;
            this.labelMsg.style.wordWrapWidth = 435;
            this.addChild(this.labelMsg);
        };
        FishingEntrance.prototype.onOpen = function () {
            _super.prototype.onOpen.call(this);
            this.btnStart = this.resource.createButton("fishing_btn_start_up.png", 18, 150, this.onStart, this);
            this.btnStart.width = 300;
            this.btnStart.height = 60;
            this.addChild(this.btnStart);
        };
        FishingEntrance.prototype.onStart = function () {
            if (app.FishingModel.mode == app.RoleType.TEACHER) {
                var msgBody = { type: app.GameAPI.gameName, status: 1 };
                fw.GResponser.postMessage("stageGameSwitch", msgBody);
            }
            else if (app.FishingModel.mode == app.RoleType.REVIEW || app.FishingModel.mode == app.RoleType.PREVIEW) {
                app.FishingModel.cacheSyncInfo = {
                    type: app.GameAPI.gameName,
                    status: 0
                };
                fw.GResponser.emit("stageGameSwitch", {
                    type: app.GameAPI.gameName,
                    status: 1,
                    currTime: Date.now()
                });
            }
            else if (app.FishingModel.mode = app.RoleType.RECORDER) {
                fw.GResponser.emit("stageGameSwitch", {
                    type: app.GameAPI.gameName,
                    status: 1,
                });
            }
        };
        FishingEntrance.prototype.onClose = function () {
            this.btnStart.destroy();
            !app.FishingModel.quiet && this.mData && this.mData.func && this.mData.func.call(this.mData.this);
            _super.prototype.onClose.call(this);
        };
        return FishingEntrance;
    }(fw.BasePanel));
    app.FishingEntrance = FishingEntrance;
})(app || (app = {}));
var app;
(function (app) {
    var FishingHook = (function (_super) {
        __extends(FishingHook, _super);
        function FishingHook() {
            var _this = _super.call(this) || this;
            _this.length = 100;
            _this.imgHookLength = 65;
            _this.cable = new PIXI.Graphics();
            _this.cable.clear();
            _this.cable.beginFill(0x33334c);
            _this.cable.drawRect(0, 0, _this.length - _this.imgHookLength, 6);
            _this.cable.endFill();
            _this.addChild(_this.cable);
            var resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            _this.imgHook = resource.createSprite("fishing_hock.png");
            _this.imgHook.rotation = -Math.PI / 2;
            _this.imgHook.x = _this.length - _this.imgHookLength;
            _this.imgHook.y = 12;
            _this.addChild(_this.imgHook);
            return _this;
        }
        Object.defineProperty(FishingHook.prototype, "hookLength", {
            get: function () {
                return this.length;
            },
            set: function (value) {
                this.length = Math.max(value, this.imgHookLength);
                this.cable.width = this.length - this.imgHookLength;
                this.imgHook.x = this.length - this.imgHookLength;
                var globalPos = this.getGlobalPosition();
                globalPos.x *= fw.SceneManager.current().designWidth / fw.Config.stageWidth;
                globalPos.y *= fw.SceneManager.current().designHeight / fw.Config.stageHeight;
                var globalRotation = Math.PI / 2 - this.rotation;
                if (this.fish) {
                    this.fish.x = globalPos.x + this.length * Math.sin(globalRotation);
                    this.fish.y = globalPos.y + this.length * Math.cos(globalRotation);
                }
            },
            enumerable: true,
            configurable: true
        });
        FishingHook.prototype.hangingFish = function (fish) {
            this.fish = fish;
        };
        FishingHook.prototype.destroy = function (options) {
            _super.prototype.destroy.call(this, options);
        };
        return FishingHook;
    }(PIXI.Container));
    app.FishingHook = FishingHook;
})(app || (app = {}));
var app;
(function (app) {
    var FishingIns = (function (_super) {
        __extends(FishingIns, _super);
        function FishingIns() {
            var _this = _super.call(this) || this;
            _this.lifeLength = 1440;
            _this.swingCycle = 100;
            _this.interactive = true;
            _this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            _this.fishImg = new PIXI.Sprite();
            _this.fishImg.anchor.x = _this.fishImg.anchor.y = 0.5;
            _this.addChild(_this.fishImg);
            _this.wordImg = new PIXI.Sprite();
            _this.wordImg.anchor.x = _this.wordImg.anchor.y = 0.5;
            _this.addChild(_this.wordImg);
            return _this;
        }
        FishingIns.create = function (par, fishId, posY) {
            var ins = app.FishingModel.fishingInsDeadPool.shift();
            !ins && (ins = new FishingIns());
            ins.activate(fishId, Math.floor(Math.random() * 3), 10667 + Math.random() * 1000, posY);
            app.FishingModel.fishingInsActivatePool.push(ins);
            par.addChild(ins);
            return ins;
        };
        FishingIns.prototype.activate = function (fishId, pathId, lifeTime, posY) {
            this.fishId = fishId;
            this.status = 0;
            var fishModelId = Math.floor(this.fishId / 100);
            this.fishImg.texture = this.resource.getTexture("fishing_fish" + fishModelId + ".png");
            this.lifeTime = lifeTime;
            this.swingCycle = this.lifeLength * (0.8 + Math.random() + 0.5);
            this.posY = posY;
            if (app.FishingModel.mode == 0 || app.FishingModel.mode == 1) {
                this.addListener("pointerup", this.onTouchFish, this);
            }
            this.clock = fw.TimerManager.addClock(this.fishId, this.lifeTime / 1000, 10);
            this.clock.registCallBack(this, this.willDie, this.update);
        };
        FishingIns.prototype.update = function (progress) {
            if (this.status != 0)
                return;
            this.x = (this.lifeLength + 100) * (1 - progress) - 100;
            this.y = this.posY + Math.sin(this.lifeLength * 2 * progress * (2 * Math.PI / this.swingCycle)) * 60;
        };
        FishingIns.prototype.onTouchFish = function (evt) {
            if (!this.dataItem || this.status != 0)
                return;
            if (this.dataItem.trueOpt) {
                this.playRight();
            }
            else {
                this.playWrong();
            }
            fw.SoundManager.playSound("fishing_touch");
        };
        FishingIns.prototype.playWrong = function () {
            if (this.status != 0)
                return;
            this.status = 2;
            fw.GResponser.emit("miss", { obj: this, x: this.x, y: this.y });
        };
        FishingIns.prototype.playWrongComplete = function () {
            console.log("playWrongComplete");
            this.status = 0;
            fw.SoundManager.playSound("fishing_wrong");
        };
        FishingIns.prototype.playRight = function () {
            if (this.status != 0)
                return;
            this.status = 1;
            fw.GResponser.emit("bomb", { obj: this, x: this.x, y: this.y });
            app.FishingModel.gotFishCount++;
        };
        FishingIns.prototype.playRightComplete = function () {
            console.log("playRightComplete");
            fw.SoundManager.playSound("fishing_right");
            if (this.dataItem && this.dataItem.audioUrl) {
                var audioFileName = fw.cutFilename(this.dataItem.audioUrl);
                fw.SoundManager.playSound(audioFileName, "../../" + this.dataItem.audioUrl);
            }
            this.status = 0;
            this.willDie();
        };
        FishingIns.prototype.fishGoHome = function () {
            if (this.status == -1 || this.status == 1)
                return;
            this.status = 3;
            fw.Tween.get(this).to({ x: -100 }, (this.x + 100) * 2).call(this.willDie, this);
        };
        FishingIns.prototype.willDie = function () {
            if (this.status == 1 || this.status == -1)
                return;
            this.destroy();
        };
        FishingIns.prototype.setData = function (value) {
            var _this = this;
            this.dataItem = value;
            fw.ResourceManager.ins.loadByUrl("../../" + value.imageUrl, function (res) {
                _this.wordImg.texture = res;
            }, this);
        };
        FishingIns.prototype.destroy = function () {
            if (this.status == -1)
                return;
            this.status = -1;
            this.removeAllListeners();
            if (this.clock) {
                this.clock.removeCallBack(this);
                fw.TimerManager.removeClock(this.fishId);
                this.clock = undefined;
            }
            this.fishImg.texture = null;
            this.wordImg.texture = null;
            fw.DisplayUtil.removeFromParent(this);
            this.dataItem = null;
            var actIndex = app.FishingModel.fishingInsActivatePool.indexOf(this);
            if (actIndex > -1) {
                app.FishingModel.fishingInsActivatePool.splice(actIndex, 1);
            }
            app.FishingModel.fishingInsDeadPool.push(this);
        };
        return FishingIns;
    }(PIXI.Container));
    app.FishingIns = FishingIns;
})(app || (app = {}));
var app;
(function (app) {
    var FishingIntro = (function (_super) {
        __extends(FishingIntro, _super);
        function FishingIntro() {
            return _super.call(this, 1080, 810) || this;
        }
        FishingIntro.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
        };
        FishingIntro.prototype.onOpen = function () {
            _super.prototype.onOpen.call(this);
            this.submarine = this.resource.createAnimatedSprite("yellow_submarine", 540, 405, true);
            this.submarine.anchor.x = this.submarine.anchor.y = 0.5;
            this.submarine.play();
            this.addChild(this.submarine);
            this.clock = fw.TimerManager.addClock(FishingIntro.ClockId, app.FishingModel.introTime / 1000, 10);
            this.clock.registCallBack(this, this.onComplete, this.onProgress);
        };
        FishingIntro.prototype.onProgress = function (progress) {
            var sx = this.designWidth * progress;
            var sy = this.designHeight / 2;
            sy = sy + Math.sin(360 * progress * (Math.PI / 180)) * 100;
            this.submarine.x = sx;
            this.submarine.y = sy;
        };
        FishingIntro.prototype.onComplete = function () {
            this.hide(true);
        };
        FishingIntro.prototype.onClose = function () {
            this.clock.removeCallBack(this);
            fw.TimerManager.stop(FishingIntro.ClockId);
            this.clock = null;
            this.submarine.stop();
            this.submarine.destroy();
            fw.ResourceManager.ins.destroyResource("yellow_submarine.json");
            !app.FishingModel.quiet && this.mData && this.mData.func && this.mData.func.call(this.mData.this);
            _super.prototype.onClose.call(this);
        };
        FishingIntro.ClockId = 11;
        return FishingIntro;
    }(fw.BasePanel));
    app.FishingIntro = FishingIntro;
})(app || (app = {}));
var app;
(function (app) {
    var RoleType;
    (function (RoleType) {
        RoleType[RoleType["REVIEW"] = 0] = "REVIEW";
        RoleType[RoleType["STUDENT"] = 1] = "STUDENT";
        RoleType[RoleType["TEACHER"] = 2] = "TEACHER";
        RoleType[RoleType["OBSERVER"] = 3] = "OBSERVER";
        RoleType[RoleType["RECORDER"] = 4] = "RECORDER";
        RoleType[RoleType["PREVIEW"] = 5] = "PREVIEW";
        RoleType[RoleType["ADMIN"] = 6] = "ADMIN";
    })(RoleType = app.RoleType || (app.RoleType = {}));
})(app || (app = {}));
(function (app) {
    var FishingModel;
    (function (FishingModel) {
        FishingModel.mode = 0;
        FishingModel.myUid = "";
        FishingModel.myName = "";
        FishingModel.quiet = false;
        FishingModel.fishGapTime = 1500;
        FishingModel.stageTime = 15000;
        FishingModel.introTime = 0;
        FishingModel.gotFishCount = 0;
        FishingModel.randomSeed = 12;
        FishingModel.fishingInsDeadPool = [];
        FishingModel.fishingInsActivatePool = [];
        FishingModel.mapAudios = [
            { name: "fishing_bg_music", url: "sounds/fishing_bg_music.mp3" },
            { name: "fishing_excellent", url: "sounds/fishing_excellent.mp3" },
            { name: "fishing_gold_sound", url: "sounds/fishing_gold_sound.mp3" },
            { name: "fishing_good_job", url: "sounds/fishing_good_job.mp3" },
            { name: "fishing_nice_try", url: "sounds/fishing_nice_try.mp3" },
            { name: "fishing_right", url: "sounds/fishing_right.mp3" },
            { name: "fishing_succeed", url: "sounds/fishing_succeed.mp3" },
            { name: "fishing_touch", url: "sounds/fishing_touch.mp3" },
            { name: "fishing_wrong", url: "sounds/fishing_wrong.mp3" },
        ];
        function getPhases() {
            var runningTime = Date.now() - FishingModel.cacheSyncInfo.startTime - FishingModel.introTime;
            if (runningTime < 0)
                return 0;
            var stageId = Math.ceil(runningTime / FishingModel.stageTime);
            if (stageId >= 5)
                return 50;
            var sep;
            if (runningTime % FishingModel.stageTime <= 100)
                sep = 0;
            else if (runningTime % FishingModel.stageTime <= 12000)
                sep = 1;
            else
                sep = 2;
            return stageId * 10 + sep;
        }
        FishingModel.getPhases = getPhases;
        function getOriginStageData(value) {
            if (!FishingModel.gameConfig || FishingModel.gameConfig.length == 0)
                return null;
            for (var _i = 0, gameConfig_1 = FishingModel.gameConfig; _i < gameConfig_1.length; _i++) {
                var data = gameConfig_1[_i];
                if (data.id == value) {
                    return data;
                }
            }
            return null;
        }
        FishingModel.getOriginStageData = getOriginStageData;
        function generateTrueData(originStage) {
            return {
                imageUrl: originStage.beforeImageUrl,
                audioUrl: originStage.audioUrl,
                trueOpt: true
            };
        }
        FishingModel.generateTrueData = generateTrueData;
        function generateFalseData(originStage) {
            return {
                imageUrl: originStage.errorsUrl[Math.floor(originStage.errorsUrl.length * Math.random())],
                audioUrl: originStage.audioUrl,
                trueOpt: false
            };
        }
        FishingModel.generateFalseData = generateFalseData;
        function generateStageData(value) {
            var originData = getOriginStageData(value);
            if (!originData)
                return null;
            var list = [];
            for (var i = 0; i < 6; i++) {
                list.push(generateTrueData(originData));
            }
            var insertIndex = 0;
            for (var i = 0; i < 4; i++) {
                insertIndex += fw.MathUtils.seedRandom(value * 13) * list.length;
                list.splice(Math.round(insertIndex) % list.length, 0, generateFalseData(originData));
            }
            return {
                id: originData.id,
                audioUrl: originData.audioUrl,
                imageUrl: originData.rightUrl,
                list: list
            };
        }
        FishingModel.generateStageData = generateStageData;
        function sensorsReport(type, data) {
            if (FishingModel.mode != app.RoleType.STUDENT && FishingModel.mode != app.RoleType.TEACHER)
                return;
            var body = { event_name: type, data: data };
            body.data.game_id = app.GameAPI.gameId;
            body.data.game_model_id = app.GameAPI.gameModelId;
            body.data.game_name = app.GameAPI.gameName;
            fw.GResponser.postMessage("sensors", body);
        }
        FishingModel.sensorsReport = sensorsReport;
        function addSwing(target, time) {
            if (fw.Config.quality <= 1)
                return;
            fw.Tween.removeTweens(target);
            fw.Tween.removeTweens(target.scale);
            target.rotation = -1 / 20 * Math.PI;
            target.scale.x = 1.0;
            fw.Tween.get(target).to({ rotation: 1 / 20 * Math.PI }, time)
                .to({ rotation: -1 / 20 * Math.PI }, time);
            fw.Tween.get(target.scale).to({ x: 0.8 }, time)
                .to({ x: 1.0 }, time)
                .call(addSwing, null, [target, time]);
        }
        FishingModel.addSwing = addSwing;
        function clearSwing(target) {
            fw.Tween.removeTweens(target);
            fw.Tween.removeTweens(target.scale);
            target.scale.x = 1;
            target.rotation = 0;
        }
        FishingModel.clearSwing = clearSwing;
        FishingModel.fishPaths = [
            { x: [0, 126, 300, 774, 1104, 1308, 1440], y: [426, 377, 390, 531, 409, 390, 424] },
            { x: [0, 237, 521, 1156, 1439], y: [342, 421, 448, 597, 340] },
            { x: [0, 59, 284, 502, 816, 1002, 1255, 1440], y: [343, 509, 566, 458, 439, 525, 610, 366] },
        ];
    })(FishingModel = app.FishingModel || (app.FishingModel = {}));
})(app || (app = {}));
var app;
(function (app) {
    var FishingSample = (function (_super) {
        __extends(FishingSample, _super);
        function FishingSample() {
            var _this = _super.call(this, 460, 376) || this;
            _this.originPos = { x: app.Config.stageWidth / 2, y: app.Config.stageHeight / 2 };
            _this.hasCallHide = false;
            return _this;
        }
        FishingSample.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
            this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            var bg = this.resource.createSprite("bbubbles_sample_bg.png", 0, 0, true);
            this.addChild(bg);
            this.imgWord = this.resource.createSprite("", 230, 138);
            this.imgWord.anchor.x = this.imgWord.anchor.y = 0.5;
            this.addChild(this.imgWord);
        };
        FishingSample.prototype.onOpen = function () {
            var _this = this;
            _super.prototype.onOpen.call(this);
            this.originPos = { x: this.x, y: this.y };
            if (this.hasCallHide) {
                this.willHide();
                return;
            }
            if (fw.Config.isDebug) {
                this.testLabel = this.resource.createLabel("", 0, 0, 20, 0xff0000, "left");
                this.addChild(this.testLabel);
            }
            if (!this.mData || !this.mData.list) {
                this.testLabel && (this.testLabel.text = "No Panel Data");
                return;
            }
            for (var _i = 0, _a = this.mData.list; _i < _a.length; _i++) {
                var wordData = _a[_i];
                if (wordData.trueOpt) {
                    this.testLabel && (this.testLabel.text = "Loading Image");
                    fw.ResourceManager.ins.loadByUrl("../../" + wordData.imageUrl, function (res) {
                        _this.testLabel && (_this.testLabel.text = "Image Loaded");
                        _this.imgWord.texture = res;
                    }, this);
                    break;
                }
            }
            this.fadeIn();
        };
        FishingSample.prototype.fadeIn = function () {
            this.scaleX = this.scaleY = 0.3;
            this.x = this.originPos.x + this.designWidth / 2 * 0.7;
            this.y = this.originPos.y + this.designHeight / 2 * 0.7;
            fw.Tween.get(this).to({ x: this.originPos.x, y: this.originPos.y, scaleX: 1.0, scaleY: 1.0 }, 600, fw.Ease.backOut).call(this.openComplete, this);
        };
        FishingSample.prototype.openComplete = function () {
        };
        FishingSample.prototype.willHide = function () {
            if (!this.isOpen) {
                this.hasCallHide = true;
                return;
            }
            fw.Tween.removeTweens(this);
            this.scaleX = this.scaleY = 1.0;
            this.x = this.originPos.x;
            this.y = this.originPos.y;
            fw.Tween.get(this).to({
                x: this.originPos.x + this.designWidth / 2 * 0.7,
                y: this.originPos.y + this.designHeight / 2 * 0.7,
                scaleX: 0.3, scaleY: 0.3
            }, 200)
                .call(this.hide, this);
        };
        FishingSample.prototype.onClose = function () {
            fw.Tween.removeTweens(this);
            this.imgWord && (this.imgWord.texture = null);
            this.hasCallHide = false;
            if (this.testLabel) {
                fw.DisplayUtil.removeFromParent(this.testLabel);
                this.testLabel = null;
            }
            _super.prototype.onClose.call(this);
        };
        Object.defineProperty(FishingSample.prototype, "scaleX", {
            get: function () { return this.scale.x; },
            set: function (value) { this.scale.x = value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FishingSample.prototype, "scaleY", {
            get: function () { return this.scale.y; },
            set: function (value) { this.scale.y = value; },
            enumerable: true,
            configurable: true
        });
        return FishingSample;
    }(fw.BasePanel));
    app.FishingSample = FishingSample;
})(app || (app = {}));
var app;
(function (app) {
    var FishingScene = (function (_super) {
        __extends(FishingScene, _super);
        function FishingScene() {
            return _super.call(this, 1440, 810) || this;
        }
        FishingScene.prototype.initialize = function () {
            var _this = this;
            fw.ResizeManager.initialize(1080, 810);
            this.initLayers();
            this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            this.background = fw.ResourceManager.ins.createSprite("fishing_bg.png");
            var bgLayer = this.getLayer(fw.DefaultLayers.BACKGROUND_LAYER);
            bgLayer.addChild(this.background);
            this.elements = [];
            var createElements = function (name, x, y, w, h, globalRes) {
                if (globalRes === void 0) { globalRes = false; }
                var ele = globalRes
                    ? fw.ResourceManager.ins.createSprite(name, x, y)
                    : _this.resource.createSprite(name, x, y);
                ele.width = w;
                ele.height = h;
                bgLayer.addChild(ele);
                _this.elements.push(ele);
                return ele;
            };
            var grass = createElements("fishing_grass5.png", 102, 659, 151, 254);
            grass.anchor.x = 0.5;
            grass.anchor.y = 1;
            app.FishingModel.addSwing(grass, 5000);
            createElements("fishing_grass6.png", 203, 421, 129, 274);
            createElements("fishing_grass3.png", 379, 652, 138, 137);
            createElements("fishing_grass7.png", 873, 659, 64, 144);
            createElements("fishing_grass8.png", 1144, 449, 179, 361);
            createElements("fishing_grass4.png", 9, 527, 406, 230);
            grass = createElements("fishing_grass2.png", 1130, 810, 109, 193);
            grass.anchor.x = 0.25;
            grass.anchor.y = 1;
            app.FishingModel.addSwing(grass, 4000);
            createElements("fishing_grass1.png", 1206, 652, 192, 158);
            createElements("fishing_bg_bottom.png", 0, 659, 1096, 151);
        };
        FishingScene.prototype.onOpen = function () {
            _super.prototype.onOpen.call(this);
            fw.SoundManager.playSound("fishing_bg_music", "", true, true);
            this.updateStage(this.currTime);
            fw.GResponser.postMessage("sceneenabled", { status: 1 });
            if (app.FishingModel.mode != 1) {
                fw.GResponser.postMessage("hideGuideLoad", { status: 1 });
            }
        };
        FishingScene.prototype.setCurrTime = function (time) {
            if (this.isOpen) {
                this.updateStage(time);
            }
            else {
                this.currTime = time;
            }
        };
        FishingScene.prototype.updateStage = function (currTime) {
            if (currTime) {
                if (app.FishingModel.mode != 2) {
                    fw.GResponser.postMessage("hideGuideLoad", { status: 1 });
                }
                app.FishingModel.quiet = true;
                fw.PanelManager.hideAllPanel();
                app.FishingModel.quiet = false;
                var panel = fw.PanelManager.showPanel(app.FishingStage, { func: this.onOpenEnding, this: this }, fw.ResizeAlign.SCALE_CLIP, this.getLayer(fw.DefaultLayers.INTERACTIVE_LAYER), []);
                panel.setCurrTime(currTime);
                this.currTime = null;
                return;
            }
            if (app.FishingModel.mode == 0 || app.FishingModel.mode == 2 || app.FishingModel.mode == 3 || app.FishingModel.mode == 4) {
                fw.PanelManager.showPanel(app.FishingEntrance, { func: this.onOpenIntro, this: this }, fw.ResizeAlign.CENTER, this.getLayer(fw.DefaultLayers.PANEL_LAYER), [], true);
            }
            else {
                app.FishingModel.cacheSyncInfo && app.FishingModel.cacheSyncInfo.status == 1 && this.onOpenIntro();
            }
        };
        FishingScene.prototype.onOpenIntro = function () {
            this.onOpenStage();
        };
        FishingScene.prototype.onOpenStage = function () {
            fw.PanelManager.showPanel(app.FishingStage, { func: this.onOpenEnding, this: this }, fw.ResizeAlign.SCALE_CLIP, this.getLayer(fw.DefaultLayers.INTERACTIVE_LAYER), []);
        };
        FishingScene.prototype.onOpenEnding = function () {
            var self = this;
            if (app.FishingModel.mode != 1) {
                fw.PanelManager.showPanel(app.FishingEnding, {}, fw.ResizeAlign.CENTER, self.getLayer(fw.DefaultLayers.PANEL_LAYER), [], true);
            }
        };
        FishingScene.prototype.setData = function (value) {
            this.mData = value;
        };
        FishingScene.prototype.onClose = function () {
            fw.GResponser.postMessage("sceneenabled", { status: 0 });
            fw.SoundManager.stopSound("fishing_bg_music");
            fw.PanelManager.hideAllPanel();
            _super.prototype.onClose.call(this);
        };
        FishingScene.prototype.destroy = function () {
            if (app.FishingModel.scoreBars) {
                app.FishingModel.scoreBars.destroy();
                app.FishingModel.scoreBars = undefined;
            }
            for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
                var grass = _a[_i];
                app.FishingModel.clearSwing(grass);
                fw.DisplayUtil.removeFromParent(grass);
                grass.destroy();
            }
            fw.DisplayUtil.removeFromParent(this.background);
            this.background && this.background.destroy();
            for (var _b = 0, _c = app.FishingModel.fishingInsActivatePool; _b < _c.length; _b++) {
                var ins = _c[_b];
                ins.destroy();
            }
            app.FishingModel.fishingInsActivatePool = [];
            app.FishingModel.fishingInsDeadPool = [];
            fw.ResourceManager.ins.destroyResource("fishing.json");
            fw.ResourceManager.ins.destroyResource("bbubbles_submarine.png");
            fw.ResourceManager.ins.destroyResource("bbubbles_submarine_ipad.png");
            fw.ResourceManager.ins.destroyResource("fishing_bg.png");
            fw.ResourceManager.ins.destroyResource("fishing_foreground.png");
            fw.ResourceManager.ins.destroyResource("fishing_wave.png");
            fw.ResourceManager.ins.destroyResource("fishing_spindrift1.png");
            fw.ResourceManager.ins.destroyResource("fishing_spindrift2.png");
            fw.ResourceManager.ins.destroyResource("fishing_spindrift3.png");
            _super.prototype.destroy.call(this);
        };
        return FishingScene;
    }(fw.BaseScene));
    app.FishingScene = FishingScene;
})(app || (app = {}));
var app;
(function (app) {
    var FishingScoreBars = (function (_super) {
        __extends(FishingScoreBars, _super);
        function FishingScoreBars() {
            var _this = _super.call(this) || this;
            _this.bars = [];
            for (var i = 0; i < app.FishingModel.studentsInfo.length; i++) {
                var bar = new ScoreBar(app.FishingModel.studentsInfo[i]);
                bar.x = i * 280;
                _this.addChild(bar);
                _this.bars.push(bar);
            }
            _this.updateScores();
            return _this;
        }
        FishingScoreBars.prototype.updateScores = function () {
            var syncInfo = app.FishingModel.cacheSyncInfo;
            if (!syncInfo)
                return;
            for (var _i = 0, _a = this.bars; _i < _a.length; _i++) {
                var bar = _a[_i];
                if (syncInfo[bar.studentInfo.uid]) {
                    bar.setData(syncInfo[bar.studentInfo.uid]);
                }
                else {
                    bar.setData(0);
                }
            }
        };
        FishingScoreBars.prototype.destroy = function () {
            this.bars && this.bars.forEach(function (bar) { bar.destroy(); });
            this.removeChildren();
            this.bars = [];
            fw.DisplayUtil.removeFromParent(this);
        };
        return FishingScoreBars;
    }(PIXI.Container));
    app.FishingScoreBars = FishingScoreBars;
    var ScoreBar = (function (_super) {
        __extends(ScoreBar, _super);
        function ScoreBar(studentInfo) {
            var _this = _super.call(this) || this;
            _this.studentInfo = studentInfo;
            _this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            var bg = _this.resource.createSprite("fishing_bg_score.png");
            _this.addChild(bg);
            _this.icons = [];
            for (var i = 0; i < 4; i++) {
                var icon = _this.resource.createSprite("", 52 + 55 * i, 30);
                icon.anchor.x = icon.anchor.y = 0.5;
                _this.addChild(icon);
                _this.icons.push(icon);
            }
            _this.setData(0);
            return _this;
        }
        ScoreBar.prototype.setData = function (value) {
            for (var i = 0; i < 4; i++) {
                var pos = 1 << i;
                var score = (value & pos) == pos;
                this.icons[i].texture = this.resource.getTexture(score ? "fishing_score_star.png" : "fishing_score_ask.png");
            }
        };
        ScoreBar.prototype.destroy = function () {
            this.removeChildren();
            this.icons = null;
            this.resource = null;
        };
        return ScoreBar;
    }(PIXI.Container));
})(app || (app = {}));
var app;
(function (app) {
    var FishingWaveImage = (function (_super) {
        __extends(FishingWaveImage, _super);
        function FishingWaveImage(texture, offsetTime) {
            var _this = _super.call(this) || this;
            _this.length = 10000;
            _this.offsetTime = offsetTime;
            _this.sprite1 = new PIXI.Sprite(texture);
            _this.addChild(_this.sprite1);
            _this.construcTime = fw.getTimer();
            if (fw.Config.quality >= 2) {
                PIXI.ticker.shared.add(_this.updateTime, _this);
            }
            return _this;
        }
        FishingWaveImage.prototype.updateTime = function (deltaTime) {
            var offset = Math.sin((fw.getTimer() - this.offsetTime - this.construcTime) % this.length / this.length * (Math.PI * 2));
            this.sprite1.y = offset * 20;
        };
        FishingWaveImage.prototype.destroy = function (options) {
            PIXI.ticker.shared.remove(this.updateTime, this);
            fw.DisplayUtil.removeFromParent(this.sprite1);
            this.sprite1.destroy();
            _super.prototype.destroy.call(this, options);
        };
        return FishingWaveImage;
    }(PIXI.Container));
    app.FishingWaveImage = FishingWaveImage;
})(app || (app = {}));
var app;
(function (app) {
    var FishingStage = (function (_super) {
        __extends(FishingStage, _super);
        function FishingStage() {
            var _this = _super.call(this, 1080, 810) || this;
            _this.fishCounter = 0;
            _this.isAwardPhase = false;
            return _this;
        }
        FishingStage.prototype.initialize = function () {
            this.resource = fw.ResourceManager.ins.getTextureResource("fishing.json");
            var bgClock = this.resource.createSprite("fishing_clock.png", 110, 40);
            this.addChild(bgClock);
            this.labelTime = this.resource.createLabel("", 146, 86, 32, 0x614A36, "center");
            this.addChild(this.labelTime);
            this.fishPool = new PIXI.Container();
            this.addChild(this.fishPool);
            this.maskBoard = new fw.GQuad(0x0, 0, 0, 1440, 810, 0);
            this.maskBoard.interactive = this.maskBoard.interactiveChildren = false;
            this.addChild(this.maskBoard);
            var bgSumbarine;
            if (fw.getDeviceType() == fw.DeviceType.iPad) {
                bgSumbarine = fw.ResourceManager.ins.createSprite("bbubbles_submarine_ipad.png", 0, this.designHeight - 218);
                this.addChild(bgSumbarine);
            }
            else {
                bgSumbarine = fw.ResourceManager.ins.createSprite("bbubbles_submarine.png", 0, this.designHeight - 258);
                this.addChild(bgSumbarine);
            }
            this.hook = new app.FishingHook();
            this.imgCurrWord = new PIXI.Sprite();
            this.imgCurrWord.anchor.x = this.imgCurrWord.anchor.y = 0.5;
            if (app.FishingModel.mode == app.RoleType.TEACHER || app.FishingModel.mode == app.RoleType.OBSERVER
                || app.FishingModel.mode == app.RoleType.RECORDER || app.FishingModel.mode == app.RoleType.PREVIEW) {
                var scoreBars = new app.FishingScoreBars();
                scoreBars.x = 15;
                scoreBars.y = 537;
                this.addChild(scoreBars);
                app.FishingModel.scoreBars = scoreBars;
            }
            if (fw.Config.isDebug) {
                this.testLabel = this.resource.createLabel("", 0, 160, 20, 0xff0000, "left");
                this.addChild(this.testLabel);
                var labelDevice = this.resource.createLabel("DeviceLevel: " + fw.Config.quality + " \nStageSize: " + fw.Config.currentDirector.app.screen.width + "x" + fw.Config.currentDirector.app.screen.height + " \nResolution: " + fw.Config.currentDirector.app.view.width + "x" + fw.Config.currentDirector.app.view.height + "\nVersion: " + fw.Config.version, 0, 210, 20, 0xff0000, "left");
                this.addChild(labelDevice);
            }
            _super.prototype.initialize.call(this);
        };
        FishingStage.prototype.onOpen = function () {
            _super.prototype.onOpen.call(this);
            this.wave = new app.FishingScrollImage(fw.ResourceManager.ins.getTexture("fishing_wave.png"), 25);
            this.wave.y = 341;
            this.addChildAt(this.wave, 0);
            this.foreground = new app.FishingScrollImage(fw.ResourceManager.ins.getTexture("fishing_foreground.png"), 20);
            this.foreground.y = 241;
            this.addChildAt(this.foreground, 1);
            this.spindrifts = [];
            var spindriftY = [283, 420, 591];
            for (var i = 1; i <= 3; i++) {
                var spindrift = new app.FishingWaveImage(fw.ResourceManager.ins.getTexture("fishing_spindrift" + i + ".png"), 2000 * i);
                spindrift.y = spindriftY[i - 1];
                this.addChildAt(spindrift, 2);
                this.spindrifts.push(spindrift);
            }
            this.dbRabbit = new fw.DragonBones();
            this.dbRabbit.x = 540;
            this.dbRabbit.y = 250;
            this.dbRabbit.load("img/rabbit", "rabbit");
            this.dbRabbit.once("loaded", this.onBonesLoaded, this);
            fw.DisplayUtil.addChildAfter(this.dbRabbit, this.wave);
            PIXI.ticker.shared.add(this.updateTime, this);
            fw.GResponser.addListener("bomb", this.onCatchHandler, this);
            fw.GResponser.addListener("miss", this.onMissHandler, this);
            fw.GResponser.addListener("stageGameNotice", this.onClickMsg, this);
            this.stageId = 1;
            this.stageData = app.FishingModel.generateStageData(this.stageId);
            this.nextStage();
        };
        FishingStage.prototype.onBonesLoaded = function (armature) {
            this.dbRabbit.play("idle");
            this.dbRabbit.replaceSlotDisplay("cable_hook", this.hook);
            this.dbRabbit.replaceSlotDisplay("word_pos", this.imgCurrWord);
        };
        FishingStage.prototype.resetHook = function () {
            this.hook.rotation = Math.PI / 2;
            this.hook.hookLength = 160;
        };
        FishingStage.prototype.setData = function (value) {
            this.mData = value;
        };
        FishingStage.prototype.setCurrTime = function (time) {
        };
        FishingStage.prototype.nextStage = function (time) {
            var _this = this;
            this.clearFishPool();
            this.resetHook();
            if (this.stageId >= 5) {
                fw.Log.log("stage complete");
                this.hide();
                if (app.FishingModel.mode == 2 || app.FishingModel.mode == 4) {
                    var msgBody = { type: app.GameAPI.gameName, status: 2 };
                    fw.GResponser.postMessage("stageGameSwitch", msgBody);
                }
                return;
            }
            this.fishCounter = time ? Math.ceil(time / app.FishingModel.fishGapTime) : 1;
            this.isAwardPhase = false;
            app.FishingModel.gotFishCount = 0;
            fw.Log.log("stage start: " + this.stageId);
            fw.ResourceManager.ins.loadByUrl("../../" + this.stageData.imageUrl, function (res) {
                _this.imgCurrWord.texture = res;
            }, this);
            var audioFileName = fw.cutFilename(this.stageData.audioUrl);
            fw.SoundManager.playSound(audioFileName, "../../" + this.stageData.audioUrl);
        };
        FishingStage.prototype.clearFishPool = function () {
            this.fishLastTimes = null;
            var valid = app.FishingModel.fishingInsActivatePool.concat();
            for (var _i = 0, valid_1 = valid; _i < valid_1.length; _i++) {
                var ins = valid_1[_i];
                ins.destroy();
            }
        };
        FishingStage.prototype.updateTime = function (deltaTime) {
            var passTime = Date.now() - app.FishingModel.cacheSyncInfo.startTime - app.FishingModel.introTime;
            var allPhase = app.FishingModel.getPhases();
            this.testLabel && (this.testLabel.text = "phase=" + allPhase + " time=" + fw.NumberFormatter.formatTime(passTime, true, true));
            if (allPhase <= 0)
                return;
            var subPhase = allPhase % 10;
            var remainingTime = Math.max(Math.ceil(15 - passTime % app.FishingModel.stageTime / 1000), 0);
            this.labelTime.text = "" + remainingTime;
            if (subPhase == 1 && this.fishCounter <= 10) {
                if (!this.fishLastTimes || passTime - this.fishLastTimes > app.FishingModel.fishGapTime) {
                    this.fishLastTimes = passTime;
                    var modelId = 1 + Math.floor(Math.random() * 6);
                    var newFish = app.FishingIns.create(this, modelId * 100 + this.fishCounter, 341 + Math.random() * 200);
                    newFish.setData(this.stageData.list[(this.fishCounter - 1) % 10]);
                    this.fishPool.addChild(newFish);
                    this.fishCounter++;
                }
            }
            var awardPhase = subPhase == 2;
            if (this.isAwardPhase != awardPhase) {
                if (awardPhase) {
                    this.showAwardChest();
                    this.maskBoard.alpha = 0.6;
                    var valid = app.FishingModel.fishingInsActivatePool.concat();
                    for (var _i = 0, valid_2 = valid; _i < valid_2.length; _i++) {
                        var ins = valid_2[_i];
                        ins.fishGoHome();
                    }
                }
                else {
                    window.hideEffectTrophy();
                    this.maskBoard.alpha = 0;
                    var runningTime = Date.now() - app.FishingModel.cacheSyncInfo.startTime - app.FishingModel.introTime;
                    this.stageId = Math.round(runningTime / app.FishingModel.stageTime) + 1;
                    this.stageData = app.FishingModel.generateStageData(this.stageId);
                    this.nextStage();
                }
                this.isAwardPhase = awardPhase;
            }
        };
        FishingStage.prototype.showAwardChest = function () {
            var soundName = "fishing_good_job";
            var ribbonName = "nicetry";
            if (app.FishingModel.mode == 0 || app.FishingModel.mode == 1) {
                if (app.FishingModel.gotFishCount >= 6) {
                    soundName = "fishing_excellent";
                    ribbonName = "excellent";
                }
                else if (app.FishingModel.gotFishCount >= 1) {
                    soundName = "fishing_good_job";
                    ribbonName = "goodjob";
                }
                else {
                    soundName = "fishing_nice_try";
                    ribbonName = "nicetry";
                }
            }
            fw.SoundManager.playSound("fishing_succeed");
            setTimeout(function () {
                fw.SoundManager.playSound(soundName);
                fw.SoundManager.playSound("fishing_gold_sound");
            }, 1500);
            if (app.FishingModel.mode != app.RoleType.STUDENT && app.FishingModel.mode != app.RoleType.REVIEW)
                ribbonName = "";
            window.showEffectTrophy(ribbonName, this.designWidth / 2, this.designHeight, ["fish6"]);
        };
        FishingStage.prototype.onCatchHandler = function (params) {
            var _this = this;
            var hookPos = this.hook.getGlobalPosition();
            hookPos.x *= fw.SceneManager.current().designWidth / fw.Config.stageWidth;
            hookPos.y *= fw.SceneManager.current().designHeight / fw.Config.stageHeight;
            var angel = Math.atan((params.y - hookPos.y) / (params.x - hookPos.x));
            var rotate = angel >= 0 ? angel + Math.PI / 2 : angel - Math.PI / 2;
            this.hook.rotation = rotate - Math.PI / 2;
            var maxLength = Math.sqrt(Math.pow(hookPos.x - params.x, 2) + Math.pow(hookPos.y - params.y, 2));
            this.hook.hookLength = maxLength / 2;
            fw.Tween.get(this.hook)
                .to({ hookLength: maxLength }, 200)
                .call(function () {
                _this.hook.hangingFish(params.obj);
            }, this)
                .to({ hookLength: 0 }, 1000)
                .call(function () {
                _this.hook.hangingFish(null);
                params.obj.playRightComplete();
            }, this)
                .to({ hookLength: 160, rotation: Math.PI / 2 }, 100)
                .call(this.resetHook, this);
        };
        FishingStage.prototype.onMissHandler = function (params) {
            var _this = this;
            var hookPos = this.hook.getGlobalPosition();
            hookPos.x *= fw.SceneManager.current().designWidth / fw.Config.stageWidth;
            hookPos.y *= fw.SceneManager.current().designHeight / fw.Config.stageHeight;
            var angel = Math.atan((params.y - hookPos.y) / (params.x - hookPos.x));
            var rotate = angel >= 0 ? angel + Math.PI / 2 : angel - Math.PI / 2;
            this.hook.rotation = rotate - Math.PI / 2;
            var maxLength = Math.sqrt(Math.pow(hookPos.x - params.x, 2) + Math.pow(hookPos.y - params.y, 2));
            this.hook.hookLength = maxLength - 30;
            fw.Tween.get(this.hook)
                .call(function () {
                _this.hook.hangingFish(params.obj);
            }, this)
                .to({ hookLength: maxLength + 30 }, 100)
                .to({ hookLength: maxLength - 30 }, 100)
                .to({ hookLength: maxLength + 30 }, 100)
                .to({ hookLength: maxLength }, 100)
                .call(function () {
                _this.hook.hangingFish(null);
                params.obj.playWrongComplete();
            }, this)
                .to({ hookLength: 160, rotation: Math.PI / 2 }, 100)
                .call(this.resetHook, this);
        };
        FishingStage.prototype.onClickMsg = function (data) {
            if (data.type != app.GameAPI.gameName)
                return;
            var checkIndex = -1;
            var studentsInfo = app.FishingModel.studentsInfo;
            for (var i = 0; i < studentsInfo.length; i++) {
                if (studentsInfo[i].uid == data.userId) {
                    checkIndex = i;
                    break;
                }
            }
            if (checkIndex != -1) {
                var score = app.FishingModel.cacheSyncInfo[data.userId] || 0;
                var pos = 1 << (data.step - 1);
                score = score | pos;
                app.FishingModel.cacheSyncInfo[data.userId] = score;
                app.FishingModel.scoreBars && app.FishingModel.scoreBars.updateScores();
            }
        };
        FishingStage.prototype.onClose = function () {
            PIXI.ticker.shared.remove(this.updateTime, this);
            fw.GResponser.removeListener("bomb", this.onCatchHandler, this);
            fw.GResponser.removeListener("miss", this.onMissHandler, this);
            fw.GResponser.removeListener("stageGameNotice", this.onClickMsg, this);
            this.wave && this.wave.destroy();
            this.foreground && this.foreground.destroy();
            for (var _i = 0, _a = this.spindrifts; _i < _a.length; _i++) {
                var ele = _a[_i];
                ele.destroy();
            }
            this.spindrifts = [];
            this.dbRabbit.destroy();
            app.FishingModel.startRunningTime = 0;
            !app.FishingModel.quiet && this.mData && this.mData.func && this.mData.func.call(this.mData.this);
            _super.prototype.onClose.call(this);
        };
        return FishingStage;
    }(fw.BasePanel));
    app.FishingStage = FishingStage;
})(app || (app = {}));
var app;
(function (app) {
    var FishingScrollImage = (function (_super) {
        __extends(FishingScrollImage, _super);
        function FishingScrollImage(texture, obstruction) {
            if (obstruction === void 0) { obstruction = 10; }
            var _this = _super.call(this) || this;
            _this.length = texture.width;
            _this.obstruction = obstruction;
            _this.sprite1 = new PIXI.Sprite(texture);
            _this.addChild(_this.sprite1);
            _this.sprite2 = new PIXI.Sprite(texture);
            _this.addChild(_this.sprite2);
            _this.construcTime = fw.getTimer();
            if (fw.Config.quality >= 2) {
                PIXI.ticker.shared.add(_this.updateTime, _this);
            }
            return _this;
        }
        FishingScrollImage.prototype.updateTime = function (deltaTime) {
            var offset = (fw.getTimer() - this.construcTime) % (this.length * this.obstruction);
            this.sprite1.x = -offset / this.obstruction;
            this.sprite2.x = this.sprite1.x + this.sprite1.width;
        };
        FishingScrollImage.prototype.destroy = function (options) {
            PIXI.ticker.shared.remove(this.updateTime, this);
            fw.DisplayUtil.removeFromParent(this.sprite1);
            this.sprite1.destroy();
            fw.DisplayUtil.removeFromParent(this.sprite2);
            this.sprite2.destroy();
            _super.prototype.destroy.call(this, options);
        };
        return FishingScrollImage;
    }(PIXI.Container));
    app.FishingScrollImage = FishingScrollImage;
})(app || (app = {}));
var app;
(function (app) {
    var FishingTweenBase = (function (_super) {
        __extends(FishingTweenBase, _super);
        function FishingTweenBase() {
            return _super.call(this) || this;
        }
        Object.defineProperty(FishingTweenBase.prototype, "scaleX", {
            get: function () {
                return this.scale.x;
            },
            set: function (value) {
                this.scale.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FishingTweenBase.prototype, "scaleY", {
            get: function () {
                return this.scale.y;
            },
            set: function (value) {
                this.scale.y = value;
            },
            enumerable: true,
            configurable: true
        });
        return FishingTweenBase;
    }(PIXI.Container));
    app.FishingTweenBase = FishingTweenBase;
})(app || (app = {}));
